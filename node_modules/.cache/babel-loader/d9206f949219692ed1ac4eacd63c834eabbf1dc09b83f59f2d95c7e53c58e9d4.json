{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.segmentBounce = exports.calcClosestPtOnSegment = exports.parsePaths = exports.drawPolygonMaskPath = exports.drawPolygonMask = void 0;\nconst ColorUtils_1 = require(\"../../Utils/ColorUtils\");\nconst Vector_1 = require(\"../../Core/Utils/Vector\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nfunction drawPolygonMask(context, rawData, stroke) {\n  const color = (0, ColorUtils_1.colorToRgb)(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.beginPath();\n  context.moveTo(rawData[0].x, rawData[0].y);\n  for (const item of rawData) {\n    context.lineTo(item.x, item.y);\n  }\n  context.closePath();\n  context.strokeStyle = (0, ColorUtils_1.getStyleFromRgb)(color);\n  context.lineWidth = stroke.width;\n  context.stroke();\n}\nexports.drawPolygonMask = drawPolygonMask;\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n  context.translate(position.x, position.y);\n  const color = (0, ColorUtils_1.colorToRgb)(stroke.color);\n  if (!color) {\n    return;\n  }\n  context.strokeStyle = (0, ColorUtils_1.getStyleFromRgb)(color, stroke.opacity);\n  context.lineWidth = stroke.width;\n  context.stroke(path);\n}\nexports.drawPolygonMaskPath = drawPolygonMaskPath;\nfunction parsePaths(paths, scale, offset) {\n  var _a;\n  const res = [];\n  for (const path of paths) {\n    const segments = path.element.pathSegList,\n      len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0,\n      p = {\n        x: 0,\n        y: 0\n      };\n    for (let i = 0; i < len; i++) {\n      const segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n      const svgPathSeg = window.SVGPathSeg;\n      switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n        case svgPathSeg.PATHSEG_MOVETO_ABS:\n        case svgPathSeg.PATHSEG_LINETO_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n        case svgPathSeg.PATHSEG_ARC_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:\n          {\n            const absSeg = segment;\n            p.x = absSeg.x;\n            p.y = absSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n          p.x = segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n          p.y = segment.y;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_REL:\n        case svgPathSeg.PATHSEG_MOVETO_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n        case svgPathSeg.PATHSEG_ARC_REL:\n        case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n        case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:\n          {\n            const relSeg = segment;\n            p.x += relSeg.x;\n            p.y += relSeg.y;\n            break;\n          }\n        case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n          p.x += segment.x;\n          break;\n        case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n          p.y += segment.y;\n          break;\n        case svgPathSeg.PATHSEG_UNKNOWN:\n        case svgPathSeg.PATHSEG_CLOSEPATH:\n          continue;\n      }\n      res.push({\n        x: p.x * scale + offset.x,\n        y: p.y * scale + offset.y\n      });\n    }\n  }\n  return res;\n}\nexports.parsePaths = parsePaths;\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n  const {\n      dx,\n      dy\n    } = (0, NumberUtils_1.getDistances)(pos, s1),\n    {\n      dx: dxx,\n      dy: dyy\n    } = (0, NumberUtils_1.getDistances)(s2, s1),\n    t = (dx * dxx + dy * dyy) / (dxx ** 2 + dyy ** 2),\n    res = {\n      x: s1.x + dxx * t,\n      y: s1.x + dyy * t,\n      isOnSegment: t >= 0 && t <= 1\n    };\n  if (t < 0) {\n    res.x = s1.x;\n    res.y = s1.y;\n  } else if (t > 1) {\n    res.x = s2.x;\n    res.y = s2.y;\n  }\n  return res;\n}\nexports.calcClosestPtOnSegment = calcClosestPtOnSegment;\nfunction segmentBounce(start, stop, velocity) {\n  const {\n      dx,\n      dy\n    } = (0, NumberUtils_1.getDistances)(start, stop),\n    wallAngle = Math.atan2(dy, dx),\n    wallNormal = Vector_1.Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)),\n    d = 2 * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);\n  wallNormal.multTo(d);\n  velocity.subFrom(wallNormal);\n}\nexports.segmentBounce = segmentBounce;","map":{"version":3,"names":["Object","defineProperty","exports","value","segmentBounce","calcClosestPtOnSegment","parsePaths","drawPolygonMaskPath","drawPolygonMask","ColorUtils_1","require","Vector_1","NumberUtils_1","context","rawData","stroke","color","colorToRgb","beginPath","moveTo","x","y","item","lineTo","closePath","strokeStyle","getStyleFromRgb","lineWidth","width","path","position","translate","opacity","paths","scale","offset","_a","res","segments","element","pathSegList","len","numberOfItems","p","i","segment","getItem","svgPathSeg","window","SVGPathSeg","pathSegType","PATHSEG_MOVETO_ABS","PATHSEG_LINETO_ABS","PATHSEG_CURVETO_CUBIC_ABS","PATHSEG_CURVETO_QUADRATIC_ABS","PATHSEG_ARC_ABS","PATHSEG_CURVETO_CUBIC_SMOOTH_ABS","PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS","absSeg","PATHSEG_LINETO_HORIZONTAL_ABS","PATHSEG_LINETO_VERTICAL_ABS","PATHSEG_LINETO_REL","PATHSEG_MOVETO_REL","PATHSEG_CURVETO_CUBIC_REL","PATHSEG_CURVETO_QUADRATIC_REL","PATHSEG_ARC_REL","PATHSEG_CURVETO_CUBIC_SMOOTH_REL","PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL","relSeg","PATHSEG_LINETO_HORIZONTAL_REL","PATHSEG_LINETO_VERTICAL_REL","PATHSEG_UNKNOWN","PATHSEG_CLOSEPATH","push","s1","s2","pos","dx","dy","getDistances","dxx","dyy","t","isOnSegment","start","stop","velocity","wallAngle","Math","atan2","wallNormal","Vector","create","sin","cos","d","multTo","subFrom"],"sources":["D:/Sergio/Portfolio DeadLine(09 Oct)/portfoliofront/node_modules/tsparticles/cjs/Plugins/PolygonMask/Utils.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.segmentBounce = exports.calcClosestPtOnSegment = exports.parsePaths = exports.drawPolygonMaskPath = exports.drawPolygonMask = void 0;\nconst ColorUtils_1 = require(\"../../Utils/ColorUtils\");\nconst Vector_1 = require(\"../../Core/Utils/Vector\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nfunction drawPolygonMask(context, rawData, stroke) {\n    const color = (0, ColorUtils_1.colorToRgb)(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.beginPath();\n    context.moveTo(rawData[0].x, rawData[0].y);\n    for (const item of rawData) {\n        context.lineTo(item.x, item.y);\n    }\n    context.closePath();\n    context.strokeStyle = (0, ColorUtils_1.getStyleFromRgb)(color);\n    context.lineWidth = stroke.width;\n    context.stroke();\n}\nexports.drawPolygonMask = drawPolygonMask;\nfunction drawPolygonMaskPath(context, path, stroke, position) {\n    context.translate(position.x, position.y);\n    const color = (0, ColorUtils_1.colorToRgb)(stroke.color);\n    if (!color) {\n        return;\n    }\n    context.strokeStyle = (0, ColorUtils_1.getStyleFromRgb)(color, stroke.opacity);\n    context.lineWidth = stroke.width;\n    context.stroke(path);\n}\nexports.drawPolygonMaskPath = drawPolygonMaskPath;\nfunction parsePaths(paths, scale, offset) {\n    var _a;\n    const res = [];\n    for (const path of paths) {\n        const segments = path.element.pathSegList, len = (_a = segments === null || segments === void 0 ? void 0 : segments.numberOfItems) !== null && _a !== void 0 ? _a : 0, p = {\n            x: 0,\n            y: 0,\n        };\n        for (let i = 0; i < len; i++) {\n            const segment = segments === null || segments === void 0 ? void 0 : segments.getItem(i);\n            const svgPathSeg = window.SVGPathSeg;\n            switch (segment === null || segment === void 0 ? void 0 : segment.pathSegType) {\n                case svgPathSeg.PATHSEG_MOVETO_ABS:\n                case svgPathSeg.PATHSEG_LINETO_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:\n                case svgPathSeg.PATHSEG_ARC_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: {\n                    const absSeg = segment;\n                    p.x = absSeg.x;\n                    p.y = absSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:\n                    p.x = segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_ABS:\n                    p.y = segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_REL:\n                case svgPathSeg.PATHSEG_MOVETO_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:\n                case svgPathSeg.PATHSEG_ARC_REL:\n                case svgPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:\n                case svgPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: {\n                    const relSeg = segment;\n                    p.x += relSeg.x;\n                    p.y += relSeg.y;\n                    break;\n                }\n                case svgPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:\n                    p.x += segment.x;\n                    break;\n                case svgPathSeg.PATHSEG_LINETO_VERTICAL_REL:\n                    p.y += segment.y;\n                    break;\n                case svgPathSeg.PATHSEG_UNKNOWN:\n                case svgPathSeg.PATHSEG_CLOSEPATH:\n                    continue;\n            }\n            res.push({\n                x: p.x * scale + offset.x,\n                y: p.y * scale + offset.y,\n            });\n        }\n    }\n    return res;\n}\nexports.parsePaths = parsePaths;\nfunction calcClosestPtOnSegment(s1, s2, pos) {\n    const { dx, dy } = (0, NumberUtils_1.getDistances)(pos, s1), { dx: dxx, dy: dyy } = (0, NumberUtils_1.getDistances)(s2, s1), t = (dx * dxx + dy * dyy) / (dxx ** 2 + dyy ** 2), res = {\n        x: s1.x + dxx * t,\n        y: s1.x + dyy * t,\n        isOnSegment: t >= 0 && t <= 1,\n    };\n    if (t < 0) {\n        res.x = s1.x;\n        res.y = s1.y;\n    }\n    else if (t > 1) {\n        res.x = s2.x;\n        res.y = s2.y;\n    }\n    return res;\n}\nexports.calcClosestPtOnSegment = calcClosestPtOnSegment;\nfunction segmentBounce(start, stop, velocity) {\n    const { dx, dy } = (0, NumberUtils_1.getDistances)(start, stop), wallAngle = Math.atan2(dy, dx), wallNormal = Vector_1.Vector.create(Math.sin(wallAngle), -Math.cos(wallAngle)), d = 2 * (velocity.x * wallNormal.x + velocity.y * wallNormal.y);\n    wallNormal.multTo(d);\n    velocity.subFrom(wallNormal);\n}\nexports.segmentBounce = segmentBounce;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,sBAAsB,GAAGH,OAAO,CAACI,UAAU,GAAGJ,OAAO,CAACK,mBAAmB,GAAGL,OAAO,CAACM,eAAe,GAAG,KAAK,CAAC;AAC5I,MAAMC,YAAY,GAAGC,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMC,QAAQ,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACnD,MAAME,aAAa,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACxD,SAASF,eAAeA,CAACK,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC/C,MAAMC,KAAK,GAAG,CAAC,CAAC,EAAEP,YAAY,CAACQ,UAAU,EAAEF,MAAM,CAACC,KAAK,CAAC;EACxD,IAAI,CAACA,KAAK,EAAE;IACR;EACJ;EACAH,OAAO,CAACK,SAAS,CAAC,CAAC;EACnBL,OAAO,CAACM,MAAM,CAACL,OAAO,CAAC,CAAC,CAAC,CAACM,CAAC,EAAEN,OAAO,CAAC,CAAC,CAAC,CAACO,CAAC,CAAC;EAC1C,KAAK,MAAMC,IAAI,IAAIR,OAAO,EAAE;IACxBD,OAAO,CAACU,MAAM,CAACD,IAAI,CAACF,CAAC,EAAEE,IAAI,CAACD,CAAC,CAAC;EAClC;EACAR,OAAO,CAACW,SAAS,CAAC,CAAC;EACnBX,OAAO,CAACY,WAAW,GAAG,CAAC,CAAC,EAAEhB,YAAY,CAACiB,eAAe,EAAEV,KAAK,CAAC;EAC9DH,OAAO,CAACc,SAAS,GAAGZ,MAAM,CAACa,KAAK;EAChCf,OAAO,CAACE,MAAM,CAAC,CAAC;AACpB;AACAb,OAAO,CAACM,eAAe,GAAGA,eAAe;AACzC,SAASD,mBAAmBA,CAACM,OAAO,EAAEgB,IAAI,EAAEd,MAAM,EAAEe,QAAQ,EAAE;EAC1DjB,OAAO,CAACkB,SAAS,CAACD,QAAQ,CAACV,CAAC,EAAEU,QAAQ,CAACT,CAAC,CAAC;EACzC,MAAML,KAAK,GAAG,CAAC,CAAC,EAAEP,YAAY,CAACQ,UAAU,EAAEF,MAAM,CAACC,KAAK,CAAC;EACxD,IAAI,CAACA,KAAK,EAAE;IACR;EACJ;EACAH,OAAO,CAACY,WAAW,GAAG,CAAC,CAAC,EAAEhB,YAAY,CAACiB,eAAe,EAAEV,KAAK,EAAED,MAAM,CAACiB,OAAO,CAAC;EAC9EnB,OAAO,CAACc,SAAS,GAAGZ,MAAM,CAACa,KAAK;EAChCf,OAAO,CAACE,MAAM,CAACc,IAAI,CAAC;AACxB;AACA3B,OAAO,CAACK,mBAAmB,GAAGA,mBAAmB;AACjD,SAASD,UAAUA,CAAC2B,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAE;EACtC,IAAIC,EAAE;EACN,MAAMC,GAAG,GAAG,EAAE;EACd,KAAK,MAAMR,IAAI,IAAII,KAAK,EAAE;IACtB,MAAMK,QAAQ,GAAGT,IAAI,CAACU,OAAO,CAACC,WAAW;MAAEC,GAAG,GAAG,CAACL,EAAE,GAAGE,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACI,aAAa,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;MAAEO,CAAC,GAAG;QACvKvB,CAAC,EAAE,CAAC;QACJC,CAAC,EAAE;MACP,CAAC;IACD,KAAK,IAAIuB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,GAAG,EAAEG,CAAC,EAAE,EAAE;MAC1B,MAAMC,OAAO,GAAGP,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAACQ,OAAO,CAACF,CAAC,CAAC;MACvF,MAAMG,UAAU,GAAGC,MAAM,CAACC,UAAU;MACpC,QAAQJ,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACK,WAAW;QACzE,KAAKH,UAAU,CAACI,kBAAkB;QAClC,KAAKJ,UAAU,CAACK,kBAAkB;QAClC,KAAKL,UAAU,CAACM,yBAAyB;QACzC,KAAKN,UAAU,CAACO,6BAA6B;QAC7C,KAAKP,UAAU,CAACQ,eAAe;QAC/B,KAAKR,UAAU,CAACS,gCAAgC;QAChD,KAAKT,UAAU,CAACU,oCAAoC;UAAE;YAClD,MAAMC,MAAM,GAAGb,OAAO;YACtBF,CAAC,CAACvB,CAAC,GAAGsC,MAAM,CAACtC,CAAC;YACduB,CAAC,CAACtB,CAAC,GAAGqC,MAAM,CAACrC,CAAC;YACd;UACJ;QACA,KAAK0B,UAAU,CAACY,6BAA6B;UACzChB,CAAC,CAACvB,CAAC,GAAGyB,OAAO,CAACzB,CAAC;UACf;QACJ,KAAK2B,UAAU,CAACa,2BAA2B;UACvCjB,CAAC,CAACtB,CAAC,GAAGwB,OAAO,CAACxB,CAAC;UACf;QACJ,KAAK0B,UAAU,CAACc,kBAAkB;QAClC,KAAKd,UAAU,CAACe,kBAAkB;QAClC,KAAKf,UAAU,CAACgB,yBAAyB;QACzC,KAAKhB,UAAU,CAACiB,6BAA6B;QAC7C,KAAKjB,UAAU,CAACkB,eAAe;QAC/B,KAAKlB,UAAU,CAACmB,gCAAgC;QAChD,KAAKnB,UAAU,CAACoB,oCAAoC;UAAE;YAClD,MAAMC,MAAM,GAAGvB,OAAO;YACtBF,CAAC,CAACvB,CAAC,IAAIgD,MAAM,CAAChD,CAAC;YACfuB,CAAC,CAACtB,CAAC,IAAI+C,MAAM,CAAC/C,CAAC;YACf;UACJ;QACA,KAAK0B,UAAU,CAACsB,6BAA6B;UACzC1B,CAAC,CAACvB,CAAC,IAAIyB,OAAO,CAACzB,CAAC;UAChB;QACJ,KAAK2B,UAAU,CAACuB,2BAA2B;UACvC3B,CAAC,CAACtB,CAAC,IAAIwB,OAAO,CAACxB,CAAC;UAChB;QACJ,KAAK0B,UAAU,CAACwB,eAAe;QAC/B,KAAKxB,UAAU,CAACyB,iBAAiB;UAC7B;MACR;MACAnC,GAAG,CAACoC,IAAI,CAAC;QACLrD,CAAC,EAAEuB,CAAC,CAACvB,CAAC,GAAGc,KAAK,GAAGC,MAAM,CAACf,CAAC;QACzBC,CAAC,EAAEsB,CAAC,CAACtB,CAAC,GAAGa,KAAK,GAAGC,MAAM,CAACd;MAC5B,CAAC,CAAC;IACN;EACJ;EACA,OAAOgB,GAAG;AACd;AACAnC,OAAO,CAACI,UAAU,GAAGA,UAAU;AAC/B,SAASD,sBAAsBA,CAACqE,EAAE,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACzC,MAAM;MAAEC,EAAE;MAAEC;IAAG,CAAC,GAAG,CAAC,CAAC,EAAElE,aAAa,CAACmE,YAAY,EAAEH,GAAG,EAAEF,EAAE,CAAC;IAAE;MAAEG,EAAE,EAAEG,GAAG;MAAEF,EAAE,EAAEG;IAAI,CAAC,GAAG,CAAC,CAAC,EAAErE,aAAa,CAACmE,YAAY,EAAEJ,EAAE,EAAED,EAAE,CAAC;IAAEQ,CAAC,GAAG,CAACL,EAAE,GAAGG,GAAG,GAAGF,EAAE,GAAGG,GAAG,KAAKD,GAAG,IAAI,CAAC,GAAGC,GAAG,IAAI,CAAC,CAAC;IAAE5C,GAAG,GAAG;MAClLjB,CAAC,EAAEsD,EAAE,CAACtD,CAAC,GAAG4D,GAAG,GAAGE,CAAC;MACjB7D,CAAC,EAAEqD,EAAE,CAACtD,CAAC,GAAG6D,GAAG,GAAGC,CAAC;MACjBC,WAAW,EAAED,CAAC,IAAI,CAAC,IAAIA,CAAC,IAAI;IAChC,CAAC;EACD,IAAIA,CAAC,GAAG,CAAC,EAAE;IACP7C,GAAG,CAACjB,CAAC,GAAGsD,EAAE,CAACtD,CAAC;IACZiB,GAAG,CAAChB,CAAC,GAAGqD,EAAE,CAACrD,CAAC;EAChB,CAAC,MACI,IAAI6D,CAAC,GAAG,CAAC,EAAE;IACZ7C,GAAG,CAACjB,CAAC,GAAGuD,EAAE,CAACvD,CAAC;IACZiB,GAAG,CAAChB,CAAC,GAAGsD,EAAE,CAACtD,CAAC;EAChB;EACA,OAAOgB,GAAG;AACd;AACAnC,OAAO,CAACG,sBAAsB,GAAGA,sBAAsB;AACvD,SAASD,aAAaA,CAACgF,KAAK,EAAEC,IAAI,EAAEC,QAAQ,EAAE;EAC1C,MAAM;MAAET,EAAE;MAAEC;IAAG,CAAC,GAAG,CAAC,CAAC,EAAElE,aAAa,CAACmE,YAAY,EAAEK,KAAK,EAAEC,IAAI,CAAC;IAAEE,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACX,EAAE,EAAED,EAAE,CAAC;IAAEa,UAAU,GAAG/E,QAAQ,CAACgF,MAAM,CAACC,MAAM,CAACJ,IAAI,CAACK,GAAG,CAACN,SAAS,CAAC,EAAE,CAACC,IAAI,CAACM,GAAG,CAACP,SAAS,CAAC,CAAC;IAAEQ,CAAC,GAAG,CAAC,IAAIT,QAAQ,CAAClE,CAAC,GAAGsE,UAAU,CAACtE,CAAC,GAAGkE,QAAQ,CAACjE,CAAC,GAAGqE,UAAU,CAACrE,CAAC,CAAC;EAChPqE,UAAU,CAACM,MAAM,CAACD,CAAC,CAAC;EACpBT,QAAQ,CAACW,OAAO,CAACP,UAAU,CAAC;AAChC;AACAxF,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}