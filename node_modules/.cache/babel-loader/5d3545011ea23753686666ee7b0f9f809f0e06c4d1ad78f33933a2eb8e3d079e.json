{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Bubbler = void 0;\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst Rectangle_1 = require(\"../../../Core/Utils/Rectangle\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n  if (modeValue >= optionsValue) {\n    const value = particleValue + (modeValue - optionsValue) * ratio;\n    return (0, NumberUtils_1.clamp)(value, particleValue, modeValue);\n  } else if (modeValue < optionsValue) {\n    const value = particleValue - (optionsValue - modeValue) * ratio;\n    return (0, NumberUtils_1.clamp)(value, modeValue, particleValue);\n  }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n  constructor(container) {\n    super(container);\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    this.handleClickMode = mode => {\n      if (mode !== \"bubble\") {\n        return;\n      }\n      if (!container.bubble) {\n        container.bubble = {};\n      }\n      container.bubble.clicking = true;\n    };\n  }\n  isEnabled() {\n    const container = this.container,\n      options = container.actualOptions,\n      mouse = container.interactivity.mouse,\n      events = options.interactivity.events,\n      divs = events.onDiv,\n      divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n    if (!(divBubble || events.onHover.enable && mouse.position || events.onClick.enable && mouse.clickPosition)) {\n      return false;\n    }\n    const hoverMode = events.onHover.mode;\n    const clickMode = events.onClick.mode;\n    return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n  }\n  reset(particle, force) {\n    if (!(!particle.bubble.inRange || force)) {\n      return;\n    }\n    delete particle.bubble.div;\n    delete particle.bubble.opacity;\n    delete particle.bubble.radius;\n    delete particle.bubble.color;\n  }\n  async interact() {\n    const options = this.container.actualOptions,\n      events = options.interactivity.events,\n      onHover = events.onHover,\n      onClick = events.onClick,\n      hoverEnabled = onHover.enable,\n      hoverMode = onHover.mode,\n      clickEnabled = onClick.enable,\n      clickMode = onClick.mode,\n      divs = events.onDiv;\n    if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n      this.hoverBubble();\n    } else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n      this.clickBubble();\n    } else {\n      (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n    }\n  }\n  singleSelectorHover(selector, div) {\n    const container = this.container,\n      selectors = document.querySelectorAll(selector);\n    if (!selectors.length) {\n      return;\n    }\n    selectors.forEach(item => {\n      const elem = item,\n        pxRatio = container.retina.pixelRatio,\n        pos = {\n          x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n          y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio\n        },\n        repulseRadius = elem.offsetWidth / 2 * pxRatio,\n        area = div.type === \"circle\" ? new Circle_1.Circle(pos.x, pos.y, repulseRadius) : new Rectangle_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio),\n        query = container.particles.quadTree.query(area);\n      for (const particle of query) {\n        if (!area.contains(particle.getPosition())) {\n          continue;\n        }\n        particle.bubble.inRange = true;\n        const divs = container.actualOptions.interactivity.modes.bubble.divs;\n        const divBubble = (0, Utils_1.divMode)(divs, elem);\n        if (!particle.bubble.div || particle.bubble.div !== elem) {\n          this.reset(particle, true);\n          particle.bubble.div = elem;\n        }\n        this.hoverBubbleSize(particle, 1, divBubble);\n        this.hoverBubbleOpacity(particle, 1, divBubble);\n        this.hoverBubbleColor(particle, 1, divBubble);\n      }\n    });\n  }\n  process(particle, distMouse, timeSpent, data) {\n    const container = this.container,\n      bubbleParam = data.bubbleObj.optValue;\n    if (bubbleParam === undefined) {\n      return;\n    }\n    const options = container.actualOptions,\n      bubbleDuration = options.interactivity.modes.bubble.duration,\n      bubbleDistance = container.retina.bubbleModeDistance,\n      particlesParam = data.particlesObj.optValue,\n      pObjBubble = data.bubbleObj.value,\n      pObj = data.particlesObj.value || 0,\n      type = data.type;\n    if (bubbleParam === particlesParam) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    if (!container.bubble.durationEnd) {\n      if (distMouse <= bubbleDistance) {\n        const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n        if (obj !== bubbleParam) {\n          const value = pObj - timeSpent * (pObj - bubbleParam) / bubbleDuration;\n          if (type === \"size\") {\n            particle.bubble.radius = value;\n          }\n          if (type === \"opacity\") {\n            particle.bubble.opacity = value;\n          }\n        }\n      } else {\n        if (type === \"size\") {\n          delete particle.bubble.radius;\n        }\n        if (type === \"opacity\") {\n          delete particle.bubble.opacity;\n        }\n      }\n    } else if (pObjBubble) {\n      if (type === \"size\") {\n        delete particle.bubble.radius;\n      }\n      if (type === \"opacity\") {\n        delete particle.bubble.opacity;\n      }\n    }\n  }\n  clickBubble() {\n    var _a, _b;\n    const container = this.container,\n      options = container.actualOptions,\n      mouseClickPos = container.interactivity.mouse.clickPosition;\n    if (!mouseClickPos) {\n      return;\n    }\n    if (!container.bubble) {\n      container.bubble = {};\n    }\n    const distance = container.retina.bubbleModeDistance,\n      query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n    for (const particle of query) {\n      if (!container.bubble.clicking) {\n        continue;\n      }\n      particle.bubble.inRange = !container.bubble.durationEnd;\n      const pos = particle.getPosition(),\n        distMouse = (0, NumberUtils_1.getDistance)(pos, mouseClickPos),\n        timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n      if (timeSpent > options.interactivity.modes.bubble.duration) {\n        container.bubble.durationEnd = true;\n      }\n      if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n        container.bubble.clicking = false;\n        container.bubble.durationEnd = false;\n      }\n      const sizeData = {\n        bubbleObj: {\n          optValue: container.retina.bubbleModeSize,\n          value: particle.bubble.radius\n        },\n        particlesObj: {\n          optValue: (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n          value: particle.size.value\n        },\n        type: \"size\"\n      };\n      this.process(particle, distMouse, timeSpent, sizeData);\n      const opacityData = {\n        bubbleObj: {\n          optValue: options.interactivity.modes.bubble.opacity,\n          value: particle.bubble.opacity\n        },\n        particlesObj: {\n          optValue: (0, NumberUtils_1.getRangeMax)(particle.options.opacity.value),\n          value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1\n        },\n        type: \"opacity\"\n      };\n      this.process(particle, distMouse, timeSpent, opacityData);\n      if (!container.bubble.durationEnd) {\n        if (distMouse <= container.retina.bubbleModeDistance) {\n          this.hoverBubbleColor(particle, distMouse);\n        } else {\n          delete particle.bubble.color;\n        }\n      } else {\n        delete particle.bubble.color;\n      }\n    }\n  }\n  hoverBubble() {\n    const container = this.container,\n      mousePos = container.interactivity.mouse.position;\n    if (mousePos === undefined) {\n      return;\n    }\n    const distance = container.retina.bubbleModeDistance,\n      query = container.particles.quadTree.queryCircle(mousePos, distance);\n    for (const particle of query) {\n      particle.bubble.inRange = true;\n      const pos = particle.getPosition(),\n        pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos),\n        ratio = 1 - pointDistance / distance;\n      if (pointDistance <= distance) {\n        if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n          this.hoverBubbleSize(particle, ratio);\n          this.hoverBubbleOpacity(particle, ratio);\n          this.hoverBubbleColor(particle, ratio);\n        }\n      } else {\n        this.reset(particle);\n      }\n      if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n        this.reset(particle);\n      }\n    }\n  }\n  hoverBubbleSize(particle, ratio, divBubble) {\n    const container = this.container,\n      modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n    if (modeSize === undefined) {\n      return;\n    }\n    const optSize = (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n    const pSize = particle.size.value;\n    const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n    if (size !== undefined) {\n      particle.bubble.radius = size;\n    }\n  }\n  hoverBubbleOpacity(particle, ratio, divBubble) {\n    var _a, _b, _c;\n    const container = this.container,\n      options = container.actualOptions,\n      modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n    if (!modeOpacity) {\n      return;\n    }\n    const optOpacity = particle.options.opacity.value;\n    const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n    const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, NumberUtils_1.getRangeMax)(optOpacity), ratio);\n    if (opacity !== undefined) {\n      particle.bubble.opacity = opacity;\n    }\n  }\n  hoverBubbleColor(particle, ratio, divBubble) {\n    const options = this.container.actualOptions;\n    const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n    if (!particle.bubble.finalColor) {\n      const modeColor = bubbleOptions.color;\n      if (!modeColor) {\n        return;\n      }\n      const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n      particle.bubble.finalColor = (0, ColorUtils_1.colorToHsl)(bubbleColor);\n    }\n    if (!particle.bubble.finalColor) {\n      return;\n    }\n    if (bubbleOptions.mix) {\n      particle.bubble.color = undefined;\n      const pColor = particle.getFillColor();\n      particle.bubble.color = pColor ? (0, ColorUtils_1.rgbToHsl)((0, ColorUtils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio)) : particle.bubble.finalColor;\n    } else {\n      particle.bubble.color = particle.bubble.finalColor;\n    }\n  }\n}\nexports.Bubbler = Bubbler;","map":{"version":3,"names":["Object","defineProperty","exports","value","Bubbler","NumberUtils_1","require","ColorUtils_1","Utils_1","Circle_1","Constants_1","ExternalInteractorBase_1","Rectangle_1","calculateBubbleValue","particleValue","modeValue","optionsValue","ratio","clamp","ExternalInteractorBase","constructor","container","bubble","handleClickMode","mode","clicking","isEnabled","options","actualOptions","mouse","interactivity","events","divs","onDiv","divBubble","isDivModeEnabled","onHover","enable","position","onClick","clickPosition","hoverMode","clickMode","isInArray","reset","particle","force","inRange","div","opacity","radius","color","interact","hoverEnabled","clickEnabled","hoverBubble","clickBubble","divModeExecute","selector","singleSelectorHover","selectors","document","querySelectorAll","length","forEach","item","elem","pxRatio","retina","pixelRatio","pos","x","offsetLeft","offsetWidth","y","offsetTop","offsetHeight","repulseRadius","area","type","Circle","Rectangle","query","particles","quadTree","contains","getPosition","modes","divMode","hoverBubbleSize","hoverBubbleOpacity","hoverBubbleColor","process","distMouse","timeSpent","data","bubbleParam","bubbleObj","optValue","undefined","bubbleDuration","duration","bubbleDistance","bubbleModeDistance","particlesParam","particlesObj","pObjBubble","pObj","durationEnd","obj","_a","_b","mouseClickPos","distance","queryCircle","getDistance","Date","getTime","clickTime","sizeData","bubbleModeSize","getRangeMax","size","opacityData","mousePos","pointDistance","status","Constants","mouseMoveEvent","mouseLeaveEvent","modeSize","optSize","pSize","_c","modeOpacity","optOpacity","pOpacity","bubbleOptions","finalColor","modeColor","bubbleColor","Array","itemFromArray","colorToHsl","mix","pColor","getFillColor","rgbToHsl","colorMix"],"sources":["D:/Sergio/Portfolio DeadLine(09 Oct)/portfoliofront/node_modules/tsparticles/cjs/Interactions/External/Bubble/Bubbler.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bubbler = void 0;\nconst NumberUtils_1 = require(\"../../../Utils/NumberUtils\");\nconst ColorUtils_1 = require(\"../../../Utils/ColorUtils\");\nconst Utils_1 = require(\"../../../Utils/Utils\");\nconst Circle_1 = require(\"../../../Core/Utils/Circle\");\nconst Constants_1 = require(\"../../../Core/Utils/Constants\");\nconst ExternalInteractorBase_1 = require(\"../../../Core/Utils/ExternalInteractorBase\");\nconst Rectangle_1 = require(\"../../../Core/Utils/Rectangle\");\nfunction calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return (0, NumberUtils_1.clamp)(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return (0, NumberUtils_1.clamp)(value, modeValue, particleValue);\n    }\n}\nclass Bubbler extends ExternalInteractorBase_1.ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== \"bubble\") {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    isEnabled() {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = options.interactivity.events, divs = events.onDiv, divBubble = (0, Utils_1.isDivModeEnabled)(\"bubble\", divs);\n        if (!(divBubble || (events.onHover.enable && mouse.position) || (events.onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode;\n        const clickMode = events.onClick.mode;\n        return (0, Utils_1.isInArray)(\"bubble\", hoverMode) || (0, Utils_1.isInArray)(\"bubble\", clickMode) || divBubble;\n    }\n    reset(particle, force) {\n        if (!(!particle.bubble.inRange || force)) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    async interact() {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && (0, Utils_1.isInArray)(\"bubble\", hoverMode)) {\n            this.hoverBubble();\n        }\n        else if (clickEnabled && (0, Utils_1.isInArray)(\"bubble\", clickMode)) {\n            this.clickBubble();\n        }\n        else {\n            (0, Utils_1.divModeExecute)(\"bubble\", divs, (selector, div) => this.singleSelectorHover(selector, div));\n        }\n    }\n    singleSelectorHover(selector, div) {\n        const container = this.container, selectors = document.querySelectorAll(selector);\n        if (!selectors.length) {\n            return;\n        }\n        selectors.forEach((item) => {\n            const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                x: (elem.offsetLeft + elem.offsetWidth / 2) * pxRatio,\n                y: (elem.offsetTop + elem.offsetHeight / 2) * pxRatio,\n            }, repulseRadius = (elem.offsetWidth / 2) * pxRatio, area = div.type === \"circle\"\n                ? new Circle_1.Circle(pos.x, pos.y, repulseRadius)\n                : new Rectangle_1.Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area);\n            for (const particle of query) {\n                if (!area.contains(particle.getPosition())) {\n                    continue;\n                }\n                particle.bubble.inRange = true;\n                const divs = container.actualOptions.interactivity.modes.bubble.divs;\n                const divBubble = (0, Utils_1.divMode)(divs, elem);\n                if (!particle.bubble.div || particle.bubble.div !== elem) {\n                    this.reset(particle, true);\n                    particle.bubble.div = elem;\n                }\n                this.hoverBubbleSize(particle, 1, divBubble);\n                this.hoverBubbleOpacity(particle, 1, divBubble);\n                this.hoverBubbleColor(particle, 1, divBubble);\n            }\n        });\n    }\n    process(particle, distMouse, timeSpent, data) {\n        const container = this.container, bubbleParam = data.bubbleObj.optValue;\n        if (bubbleParam === undefined) {\n            return;\n        }\n        const options = container.actualOptions, bubbleDuration = options.interactivity.modes.bubble.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value || 0, type = data.type;\n        if (bubbleParam === particlesParam) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        if (!container.bubble.durationEnd) {\n            if (distMouse <= bubbleDistance) {\n                const obj = pObjBubble !== null && pObjBubble !== void 0 ? pObjBubble : pObj;\n                if (obj !== bubbleParam) {\n                    const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                    if (type === \"size\") {\n                        particle.bubble.radius = value;\n                    }\n                    if (type === \"opacity\") {\n                        particle.bubble.opacity = value;\n                    }\n                }\n            }\n            else {\n                if (type === \"size\") {\n                    delete particle.bubble.radius;\n                }\n                if (type === \"opacity\") {\n                    delete particle.bubble.opacity;\n                }\n            }\n        }\n        else if (pObjBubble) {\n            if (type === \"size\") {\n                delete particle.bubble.radius;\n            }\n            if (type === \"opacity\") {\n                delete particle.bubble.opacity;\n            }\n        }\n    }\n    clickBubble() {\n        var _a, _b;\n        const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition;\n        if (!mouseClickPos) {\n            return;\n        }\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mouseClickPos, distance);\n        for (const particle of query) {\n            if (!container.bubble.clicking) {\n                continue;\n            }\n            particle.bubble.inRange = !container.bubble.durationEnd;\n            const pos = particle.getPosition(), distMouse = (0, NumberUtils_1.getDistance)(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime || 0)) / 1000;\n            if (timeSpent > options.interactivity.modes.bubble.duration) {\n                container.bubble.durationEnd = true;\n            }\n            if (timeSpent > options.interactivity.modes.bubble.duration * 2) {\n                container.bubble.clicking = false;\n                container.bubble.durationEnd = false;\n            }\n            const sizeData = {\n                bubbleObj: {\n                    optValue: container.retina.bubbleModeSize,\n                    value: particle.bubble.radius,\n                },\n                particlesObj: {\n                    optValue: (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio,\n                    value: particle.size.value,\n                },\n                type: \"size\",\n            };\n            this.process(particle, distMouse, timeSpent, sizeData);\n            const opacityData = {\n                bubbleObj: {\n                    optValue: options.interactivity.modes.bubble.opacity,\n                    value: particle.bubble.opacity,\n                },\n                particlesObj: {\n                    optValue: (0, NumberUtils_1.getRangeMax)(particle.options.opacity.value),\n                    value: (_b = (_a = particle.opacity) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 1,\n                },\n                type: \"opacity\",\n            };\n            this.process(particle, distMouse, timeSpent, opacityData);\n            if (!container.bubble.durationEnd) {\n                if (distMouse <= container.retina.bubbleModeDistance) {\n                    this.hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n            else {\n                delete particle.bubble.color;\n            }\n        }\n    }\n    hoverBubble() {\n        const container = this.container, mousePos = container.interactivity.mouse.position;\n        if (mousePos === undefined) {\n            return;\n        }\n        const distance = container.retina.bubbleModeDistance, query = container.particles.quadTree.queryCircle(mousePos, distance);\n        for (const particle of query) {\n            particle.bubble.inRange = true;\n            const pos = particle.getPosition(), pointDistance = (0, NumberUtils_1.getDistance)(pos, mousePos), ratio = 1 - pointDistance / distance;\n            if (pointDistance <= distance) {\n                if (ratio >= 0 && container.interactivity.status === Constants_1.Constants.mouseMoveEvent) {\n                    this.hoverBubbleSize(particle, ratio);\n                    this.hoverBubbleOpacity(particle, ratio);\n                    this.hoverBubbleColor(particle, ratio);\n                }\n            }\n            else {\n                this.reset(particle);\n            }\n            if (container.interactivity.status === Constants_1.Constants.mouseLeaveEvent) {\n                this.reset(particle);\n            }\n        }\n    }\n    hoverBubbleSize(particle, ratio, divBubble) {\n        const container = this.container, modeSize = (divBubble === null || divBubble === void 0 ? void 0 : divBubble.size) ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n        if (modeSize === undefined) {\n            return;\n        }\n        const optSize = (0, NumberUtils_1.getRangeMax)(particle.options.size.value) * container.retina.pixelRatio;\n        const pSize = particle.size.value;\n        const size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n        if (size !== undefined) {\n            particle.bubble.radius = size;\n        }\n    }\n    hoverBubbleOpacity(particle, ratio, divBubble) {\n        var _a, _b, _c;\n        const container = this.container, options = container.actualOptions, modeOpacity = (_a = divBubble === null || divBubble === void 0 ? void 0 : divBubble.opacity) !== null && _a !== void 0 ? _a : options.interactivity.modes.bubble.opacity;\n        if (!modeOpacity) {\n            return;\n        }\n        const optOpacity = particle.options.opacity.value;\n        const pOpacity = (_c = (_b = particle.opacity) === null || _b === void 0 ? void 0 : _b.value) !== null && _c !== void 0 ? _c : 1;\n        const opacity = calculateBubbleValue(pOpacity, modeOpacity, (0, NumberUtils_1.getRangeMax)(optOpacity), ratio);\n        if (opacity !== undefined) {\n            particle.bubble.opacity = opacity;\n        }\n    }\n    hoverBubbleColor(particle, ratio, divBubble) {\n        const options = this.container.actualOptions;\n        const bubbleOptions = divBubble !== null && divBubble !== void 0 ? divBubble : options.interactivity.modes.bubble;\n        if (!particle.bubble.finalColor) {\n            const modeColor = bubbleOptions.color;\n            if (!modeColor) {\n                return;\n            }\n            const bubbleColor = modeColor instanceof Array ? (0, Utils_1.itemFromArray)(modeColor) : modeColor;\n            particle.bubble.finalColor = (0, ColorUtils_1.colorToHsl)(bubbleColor);\n        }\n        if (!particle.bubble.finalColor) {\n            return;\n        }\n        if (bubbleOptions.mix) {\n            particle.bubble.color = undefined;\n            const pColor = particle.getFillColor();\n            particle.bubble.color = pColor\n                ? (0, ColorUtils_1.rgbToHsl)((0, ColorUtils_1.colorMix)(pColor, particle.bubble.finalColor, 1 - ratio, ratio))\n                : particle.bubble.finalColor;\n        }\n        else {\n            particle.bubble.color = particle.bubble.finalColor;\n        }\n    }\n}\nexports.Bubbler = Bubbler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}