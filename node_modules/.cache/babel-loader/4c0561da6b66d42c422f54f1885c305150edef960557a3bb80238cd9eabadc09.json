{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n  constructor(container) {\n    this.container = container;\n    this.dimension = {\n      height: 0,\n      width: 0\n    };\n    this.path2DSupported = !!window.Path2D;\n    this.options = new PolygonMask_1.PolygonMask();\n    this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n  }\n  async initAsync(options) {\n    this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n    const polygonMaskOptions = this.options;\n    this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n    if (polygonMaskOptions.enable) {\n      await this.initRawData();\n    }\n  }\n  resize() {\n    const container = this.container,\n      options = this.options;\n    if (!(options.enable && options.type !== \"none\")) {\n      return;\n    }\n    if (this.redrawTimeout) {\n      clearTimeout(this.redrawTimeout);\n    }\n    this.redrawTimeout = window.setTimeout(async () => {\n      await this.initRawData(true);\n      await container.particles.redraw();\n    }, 250);\n  }\n  stop() {\n    delete this.raw;\n    delete this.paths;\n  }\n  particlesInitialization() {\n    const options = this.options;\n    if (options.enable && options.type === \"inline\" && (options.inline.arrangement === \"one-per-point\" || options.inline.arrangement === \"per-point\")) {\n      this.drawPoints();\n      return true;\n    }\n    return false;\n  }\n  particlePosition(position) {\n    var _a, _b;\n    const options = this.options;\n    if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n      return;\n    }\n    return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n  }\n  particleBounce(particle, delta, direction) {\n    return this.polygonBounce(particle, delta, direction);\n  }\n  clickPositionValid(position) {\n    const options = this.options;\n    return options.enable && options.type !== \"none\" && options.type !== \"inline\" && this.checkInsidePolygon(position);\n  }\n  draw(context) {\n    var _a;\n    if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    const options = this.options,\n      polygonDraw = options.draw;\n    if (!options.enable || !polygonDraw.enable) {\n      return;\n    }\n    const rawData = this.raw;\n    for (const path of this.paths) {\n      const path2d = path.path2d,\n        path2dSupported = this.path2DSupported;\n      if (!context) {\n        continue;\n      }\n      if (path2dSupported && path2d && this.offset) {\n        (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n      } else if (rawData) {\n        (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n      }\n    }\n  }\n  polygonBounce(particle, _delta, direction) {\n    const options = this.options;\n    if (!this.raw || !options.enable || direction !== \"top\") {\n      return false;\n    }\n    if (options.type === \"inside\" || options.type === \"outside\") {\n      let closest, dx, dy;\n      const pos = particle.getPosition(),\n        radius = particle.getRadius();\n      for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n        const pi = this.raw[i],\n          pj = this.raw[j];\n        closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n        const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n        [dx, dy] = [dist.dx, dist.dy];\n        if (dist.distance < radius) {\n          (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n          return true;\n        }\n      }\n      if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n        const factor = {\n          x: 1,\n          y: 1\n        };\n        if (particle.position.x >= closest.x) {\n          factor.x = -1;\n        }\n        if (particle.position.y >= closest.y) {\n          factor.y = -1;\n        }\n        particle.position.x = closest.x + radius * 2 * factor.x;\n        particle.position.y = closest.y + radius * 2 * factor.y;\n        particle.velocity.mult(-1);\n        return true;\n      }\n    } else if (options.type === \"inline\" && particle.initialPosition) {\n      const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n      if (dist > this.polygonMaskMoveRadius) {\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n        return true;\n      }\n    }\n    return false;\n  }\n  checkInsidePolygon(position) {\n    var _a, _b;\n    const container = this.container,\n      options = this.options;\n    if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n      return true;\n    }\n    if (!this.raw) {\n      throw new Error(Constants_1.Constants.noPolygonFound);\n    }\n    const canvasSize = container.canvas.size,\n      x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width,\n      y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n    let inside = false;\n    for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n      const pi = this.raw[i],\n        pj = this.raw[j],\n        intersect = pi.y > y !== pj.y > y && x < (pj.x - pi.x) * (y - pi.y) / (pj.y - pi.y) + pi.x;\n      if (intersect) {\n        inside = !inside;\n      }\n    }\n    return options.type === \"inside\" ? inside : options.type === \"outside\" ? !inside : false;\n  }\n  parseSvgPath(xml, force) {\n    var _a, _b, _c;\n    const forceDownload = force !== null && force !== void 0 ? force : false;\n    if (this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const container = this.container,\n      options = this.options,\n      parser = new DOMParser(),\n      doc = parser.parseFromString(xml, \"image/svg+xml\"),\n      svg = doc.getElementsByTagName(\"svg\")[0];\n    let svgPaths = svg.getElementsByTagName(\"path\");\n    if (!svgPaths.length) {\n      svgPaths = doc.getElementsByTagName(\"path\");\n    }\n    this.paths = [];\n    for (let i = 0; i < svgPaths.length; i++) {\n      const path = svgPaths.item(i);\n      if (path) {\n        this.paths.push({\n          element: path,\n          length: path.getTotalLength()\n        });\n      }\n    }\n    const pxRatio = container.retina.pixelRatio,\n      scale = options.scale / pxRatio;\n    this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n    this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n    const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n      x: 50,\n      y: 50\n    };\n    this.offset = {\n      x: container.canvas.size.width * position.x / (100 * pxRatio) - this.dimension.width / 2,\n      y: container.canvas.size.height * position.y / (100 * pxRatio) - this.dimension.height / 2\n    };\n    return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n  }\n  async downloadSvgPath(svgUrl, force) {\n    const options = this.options,\n      url = svgUrl || options.url,\n      forceDownload = force !== null && force !== void 0 ? force : false;\n    if (!url || this.paths !== undefined && !forceDownload) {\n      return this.raw;\n    }\n    const req = await fetch(url);\n    if (!req.ok) {\n      throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n    }\n    return this.parseSvgPath(await req.text(), force);\n  }\n  drawPoints() {\n    if (!this.raw) {\n      return;\n    }\n    for (const item of this.raw) {\n      this.container.particles.addParticle({\n        x: item.x,\n        y: item.y\n      });\n    }\n  }\n  randomPoint() {\n    const container = this.container,\n      options = this.options;\n    let position;\n    if (options.type === \"inline\") {\n      switch (options.inline.arrangement) {\n        case \"random-point\":\n          position = this.getRandomPoint();\n          break;\n        case \"random-length\":\n          position = this.getRandomPointByLength();\n          break;\n        case \"equidistant\":\n          position = this.getEquidistantPointByIndex(container.particles.count);\n          break;\n        case \"one-per-point\":\n        case \"per-point\":\n        default:\n          position = this.getPointByIndex(container.particles.count);\n      }\n    } else {\n      position = {\n        x: Math.random() * container.canvas.size.width,\n        y: Math.random() * container.canvas.size.height\n      };\n    }\n    if (this.checkInsidePolygon(position)) {\n      return position;\n    } else {\n      return this.randomPoint();\n    }\n  }\n  getRandomPoint() {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n    const coords = (0, Utils_2.itemFromArray)(this.raw);\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  getRandomPointByLength() {\n    var _a, _b, _c;\n    const options = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n    const path = (0, Utils_2.itemFromArray)(this.paths),\n      distance = Math.floor(Math.random() * path.length) + 1,\n      point = path.element.getPointAtLength(distance);\n    return {\n      x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n      y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0)\n    };\n  }\n  getEquidistantPointByIndex(index) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const options = this.container.actualOptions,\n      polygonMaskOptions = this.options;\n    if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    let offset = 0,\n      point;\n    const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0),\n      distance = totalLength / options.particles.number.value;\n    for (const path of this.paths) {\n      const pathDistance = distance * index - offset;\n      if (pathDistance <= path.length) {\n        point = path.element.getPointAtLength(pathDistance);\n        break;\n      } else {\n        offset += path.length;\n      }\n    }\n    return {\n      x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n      y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0)\n    };\n  }\n  getPointByIndex(index) {\n    if (!this.raw || !this.raw.length) {\n      throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n    }\n    const coords = this.raw[index % this.raw.length];\n    return {\n      x: coords.x,\n      y: coords.y\n    };\n  }\n  createPath2D() {\n    var _a, _b;\n    const options = this.options;\n    if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n      return;\n    }\n    for (const path of this.paths) {\n      const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n      if (pathData) {\n        const path2d = new Path2D(pathData),\n          matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(),\n          finalPath = new Path2D(),\n          transform = matrix.scale(options.scale);\n        if (finalPath.addPath) {\n          finalPath.addPath(path2d, transform);\n          path.path2d = finalPath;\n        } else {\n          delete path.path2d;\n        }\n      } else {\n        delete path.path2d;\n      }\n      if (path.path2d || !this.raw) {\n        continue;\n      }\n      path.path2d = new Path2D();\n      path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n      this.raw.forEach((pos, i) => {\n        var _a;\n        if (i > 0) {\n          (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n        }\n      });\n      path.path2d.closePath();\n    }\n  }\n  async initRawData(force) {\n    const options = this.options;\n    if (options.url) {\n      this.raw = await this.downloadSvgPath(options.url, force);\n    } else if (options.data) {\n      const data = options.data;\n      let svg;\n      if (typeof data !== \"string\") {\n        const path = data.path instanceof Array ? data.path.map(t => `<path d=\"${t}\" />`).join(\"\") : `<path d=\"${data.path}\" />`;\n        const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n        svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n      } else {\n        svg = data;\n      }\n      this.raw = this.parseSvgPath(svg, force);\n    }\n    this.createPath2D();\n  }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;","map":{"version":3,"names":["Object","defineProperty","exports","value","PolygonMaskInstance","Utils_1","require","Utils_2","NumberUtils_1","Constants_1","PolygonMask_1","constructor","container","dimension","height","width","path2DSupported","window","Path2D","options","PolygonMask","polygonMaskMoveRadius","move","radius","retina","pixelRatio","initAsync","load","polygon","polygonMaskOptions","enable","initRawData","resize","type","redrawTimeout","clearTimeout","setTimeout","particles","redraw","stop","raw","paths","particlesInitialization","inline","arrangement","drawPoints","particlePosition","position","_a","_b","length","deepExtend","randomPoint","particleBounce","particle","delta","direction","polygonBounce","clickPositionValid","checkInsidePolygon","draw","context","polygonDraw","rawData","path","path2d","path2dSupported","offset","drawPolygonMaskPath","stroke","drawPolygonMask","_delta","closest","dx","dy","pos","getPosition","getRadius","i","j","pi","pj","calcClosestPtOnSegment","dist","getDistances","distance","segmentBounce","velocity","undefined","factor","x","y","mult","initialPosition","getDistance","Error","Constants","noPolygonFound","canvasSize","canvas","size","Math","random","inside","intersect","parseSvgPath","xml","force","_c","forceDownload","parser","DOMParser","doc","parseFromString","svg","getElementsByTagName","svgPaths","item","push","element","getTotalLength","pxRatio","scale","parseFloat","getAttribute","parsePaths","downloadSvgPath","svgUrl","url","req","fetch","ok","text","addParticle","getRandomPoint","getRandomPointByLength","getEquidistantPointByIndex","count","getPointByIndex","noPolygonDataLoaded","coords","itemFromArray","floor","point","getPointAtLength","index","_d","_e","_f","_g","actualOptions","totalLength","reduce","tot","number","pathDistance","createPath2D","pathData","matrix","document","createElementNS","createSVGMatrix","finalPath","transform","addPath","moveTo","forEach","lineTo","closePath","data","Array","map","t","join","namespaces"],"sources":["D:/Sergio/Portfolio DeadLine(09 Oct)/portfoliofront/node_modules/tsparticles/cjs/Plugins/PolygonMask/PolygonMaskInstance.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PolygonMaskInstance = void 0;\nconst Utils_1 = require(\"./Utils\");\nconst Utils_2 = require(\"../../Utils/Utils\");\nconst NumberUtils_1 = require(\"../../Utils/NumberUtils\");\nconst Constants_1 = require(\"../../Core/Utils/Constants\");\nconst PolygonMask_1 = require(\"./Options/Classes/PolygonMask\");\nclass PolygonMaskInstance {\n    constructor(container) {\n        this.container = container;\n        this.dimension = {\n            height: 0,\n            width: 0,\n        };\n        this.path2DSupported = !!window.Path2D;\n        this.options = new PolygonMask_1.PolygonMask();\n        this.polygonMaskMoveRadius = this.options.move.radius * container.retina.pixelRatio;\n    }\n    async initAsync(options) {\n        this.options.load(options === null || options === void 0 ? void 0 : options.polygon);\n        const polygonMaskOptions = this.options;\n        this.polygonMaskMoveRadius = polygonMaskOptions.move.radius * this.container.retina.pixelRatio;\n        if (polygonMaskOptions.enable) {\n            await this.initRawData();\n        }\n    }\n    resize() {\n        const container = this.container, options = this.options;\n        if (!(options.enable && options.type !== \"none\")) {\n            return;\n        }\n        if (this.redrawTimeout) {\n            clearTimeout(this.redrawTimeout);\n        }\n        this.redrawTimeout = window.setTimeout(async () => {\n            await this.initRawData(true);\n            await container.particles.redraw();\n        }, 250);\n    }\n    stop() {\n        delete this.raw;\n        delete this.paths;\n    }\n    particlesInitialization() {\n        const options = this.options;\n        if (options.enable &&\n            options.type === \"inline\" &&\n            (options.inline.arrangement === \"one-per-point\" ||\n                options.inline.arrangement === \"per-point\")) {\n            this.drawPoints();\n            return true;\n        }\n        return false;\n    }\n    particlePosition(position) {\n        var _a, _b;\n        const options = this.options;\n        if (!(options.enable && ((_b = (_a = this.raw) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 0)) {\n            return;\n        }\n        return (0, Utils_2.deepExtend)({}, position ? position : this.randomPoint());\n    }\n    particleBounce(particle, delta, direction) {\n        return this.polygonBounce(particle, delta, direction);\n    }\n    clickPositionValid(position) {\n        const options = this.options;\n        return (options.enable &&\n            options.type !== \"none\" &&\n            options.type !== \"inline\" &&\n            this.checkInsidePolygon(position));\n    }\n    draw(context) {\n        var _a;\n        if (!((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        const options = this.options, polygonDraw = options.draw;\n        if (!options.enable || !polygonDraw.enable) {\n            return;\n        }\n        const rawData = this.raw;\n        for (const path of this.paths) {\n            const path2d = path.path2d, path2dSupported = this.path2DSupported;\n            if (!context) {\n                continue;\n            }\n            if (path2dSupported && path2d && this.offset) {\n                (0, Utils_1.drawPolygonMaskPath)(context, path2d, polygonDraw.stroke, this.offset);\n            }\n            else if (rawData) {\n                (0, Utils_1.drawPolygonMask)(context, rawData, polygonDraw.stroke);\n            }\n        }\n    }\n    polygonBounce(particle, _delta, direction) {\n        const options = this.options;\n        if (!this.raw || !options.enable || direction !== \"top\") {\n            return false;\n        }\n        if (options.type === \"inside\" || options.type === \"outside\") {\n            let closest, dx, dy;\n            const pos = particle.getPosition(), radius = particle.getRadius();\n            for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n                const pi = this.raw[i], pj = this.raw[j];\n                closest = (0, Utils_1.calcClosestPtOnSegment)(pi, pj, pos);\n                const dist = (0, NumberUtils_1.getDistances)(pos, closest);\n                [dx, dy] = [dist.dx, dist.dy];\n                if (dist.distance < radius) {\n                    (0, Utils_1.segmentBounce)(pi, pj, particle.velocity);\n                    return true;\n                }\n            }\n            if (closest && dx !== undefined && dy !== undefined && !this.checkInsidePolygon(pos)) {\n                const factor = { x: 1, y: 1 };\n                if (particle.position.x >= closest.x) {\n                    factor.x = -1;\n                }\n                if (particle.position.y >= closest.y) {\n                    factor.y = -1;\n                }\n                particle.position.x = closest.x + radius * 2 * factor.x;\n                particle.position.y = closest.y + radius * 2 * factor.y;\n                particle.velocity.mult(-1);\n                return true;\n            }\n        }\n        else if (options.type === \"inline\" && particle.initialPosition) {\n            const dist = (0, NumberUtils_1.getDistance)(particle.initialPosition, particle.getPosition());\n            if (dist > this.polygonMaskMoveRadius) {\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n                return true;\n            }\n        }\n        return false;\n    }\n    checkInsidePolygon(position) {\n        var _a, _b;\n        const container = this.container, options = this.options;\n        if (!options.enable || options.type === \"none\" || options.type === \"inline\") {\n            return true;\n        }\n        if (!this.raw) {\n            throw new Error(Constants_1.Constants.noPolygonFound);\n        }\n        const canvasSize = container.canvas.size, x = (_a = position === null || position === void 0 ? void 0 : position.x) !== null && _a !== void 0 ? _a : Math.random() * canvasSize.width, y = (_b = position === null || position === void 0 ? void 0 : position.y) !== null && _b !== void 0 ? _b : Math.random() * canvasSize.height;\n        let inside = false;\n        for (let i = 0, j = this.raw.length - 1; i < this.raw.length; j = i++) {\n            const pi = this.raw[i], pj = this.raw[j], intersect = pi.y > y !== pj.y > y && x < ((pj.x - pi.x) * (y - pi.y)) / (pj.y - pi.y) + pi.x;\n            if (intersect) {\n                inside = !inside;\n            }\n        }\n        return options.type === \"inside\"\n            ? inside\n            : options.type === \"outside\"\n                ? !inside\n                : false;\n    }\n    parseSvgPath(xml, force) {\n        var _a, _b, _c;\n        const forceDownload = force !== null && force !== void 0 ? force : false;\n        if (this.paths !== undefined && !forceDownload) {\n            return this.raw;\n        }\n        const container = this.container, options = this.options, parser = new DOMParser(), doc = parser.parseFromString(xml, \"image/svg+xml\"), svg = doc.getElementsByTagName(\"svg\")[0];\n        let svgPaths = svg.getElementsByTagName(\"path\");\n        if (!svgPaths.length) {\n            svgPaths = doc.getElementsByTagName(\"path\");\n        }\n        this.paths = [];\n        for (let i = 0; i < svgPaths.length; i++) {\n            const path = svgPaths.item(i);\n            if (path) {\n                this.paths.push({\n                    element: path,\n                    length: path.getTotalLength(),\n                });\n            }\n        }\n        const pxRatio = container.retina.pixelRatio, scale = options.scale / pxRatio;\n        this.dimension.width = parseFloat((_a = svg.getAttribute(\"width\")) !== null && _a !== void 0 ? _a : \"0\") * scale;\n        this.dimension.height = parseFloat((_b = svg.getAttribute(\"height\")) !== null && _b !== void 0 ? _b : \"0\") * scale;\n        const position = (_c = options.position) !== null && _c !== void 0 ? _c : {\n            x: 50,\n            y: 50,\n        };\n        this.offset = {\n            x: (container.canvas.size.width * position.x) / (100 * pxRatio) - this.dimension.width / 2,\n            y: (container.canvas.size.height * position.y) / (100 * pxRatio) - this.dimension.height / 2,\n        };\n        return (0, Utils_1.parsePaths)(this.paths, scale, this.offset);\n    }\n    async downloadSvgPath(svgUrl, force) {\n        const options = this.options, url = svgUrl || options.url, forceDownload = force !== null && force !== void 0 ? force : false;\n        if (!url || (this.paths !== undefined && !forceDownload)) {\n            return this.raw;\n        }\n        const req = await fetch(url);\n        if (!req.ok) {\n            throw new Error(\"tsParticles Error - Error occurred during polygon mask download\");\n        }\n        return this.parseSvgPath(await req.text(), force);\n    }\n    drawPoints() {\n        if (!this.raw) {\n            return;\n        }\n        for (const item of this.raw) {\n            this.container.particles.addParticle({\n                x: item.x,\n                y: item.y,\n            });\n        }\n    }\n    randomPoint() {\n        const container = this.container, options = this.options;\n        let position;\n        if (options.type === \"inline\") {\n            switch (options.inline.arrangement) {\n                case \"random-point\":\n                    position = this.getRandomPoint();\n                    break;\n                case \"random-length\":\n                    position = this.getRandomPointByLength();\n                    break;\n                case \"equidistant\":\n                    position = this.getEquidistantPointByIndex(container.particles.count);\n                    break;\n                case \"one-per-point\":\n                case \"per-point\":\n                default:\n                    position = this.getPointByIndex(container.particles.count);\n            }\n        }\n        else {\n            position = {\n                x: Math.random() * container.canvas.size.width,\n                y: Math.random() * container.canvas.size.height,\n            };\n        }\n        if (this.checkInsidePolygon(position)) {\n            return position;\n        }\n        else {\n            return this.randomPoint();\n        }\n    }\n    getRandomPoint() {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = (0, Utils_2.itemFromArray)(this.raw);\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    getRandomPointByLength() {\n        var _a, _b, _c;\n        const options = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const path = (0, Utils_2.itemFromArray)(this.paths), distance = Math.floor(Math.random() * path.length) + 1, point = path.element.getPointAtLength(distance);\n        return {\n            x: point.x * options.scale + (((_b = this.offset) === null || _b === void 0 ? void 0 : _b.x) || 0),\n            y: point.y * options.scale + (((_c = this.offset) === null || _c === void 0 ? void 0 : _c.y) || 0),\n        };\n    }\n    getEquidistantPointByIndex(index) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const options = this.container.actualOptions, polygonMaskOptions = this.options;\n        if (!this.raw || !this.raw.length || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length))\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        let offset = 0, point;\n        const totalLength = this.paths.reduce((tot, path) => tot + path.length, 0), distance = totalLength / options.particles.number.value;\n        for (const path of this.paths) {\n            const pathDistance = distance * index - offset;\n            if (pathDistance <= path.length) {\n                point = path.element.getPointAtLength(pathDistance);\n                break;\n            }\n            else {\n                offset += path.length;\n            }\n        }\n        return {\n            x: ((_b = point === null || point === void 0 ? void 0 : point.x) !== null && _b !== void 0 ? _b : 0) * polygonMaskOptions.scale + ((_d = (_c = this.offset) === null || _c === void 0 ? void 0 : _c.x) !== null && _d !== void 0 ? _d : 0),\n            y: ((_e = point === null || point === void 0 ? void 0 : point.y) !== null && _e !== void 0 ? _e : 0) * polygonMaskOptions.scale + ((_g = (_f = this.offset) === null || _f === void 0 ? void 0 : _f.y) !== null && _g !== void 0 ? _g : 0),\n        };\n    }\n    getPointByIndex(index) {\n        if (!this.raw || !this.raw.length) {\n            throw new Error(Constants_1.Constants.noPolygonDataLoaded);\n        }\n        const coords = this.raw[index % this.raw.length];\n        return {\n            x: coords.x,\n            y: coords.y,\n        };\n    }\n    createPath2D() {\n        var _a, _b;\n        const options = this.options;\n        if (!this.path2DSupported || !((_a = this.paths) === null || _a === void 0 ? void 0 : _a.length)) {\n            return;\n        }\n        for (const path of this.paths) {\n            const pathData = (_b = path.element) === null || _b === void 0 ? void 0 : _b.getAttribute(\"d\");\n            if (pathData) {\n                const path2d = new Path2D(pathData), matrix = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").createSVGMatrix(), finalPath = new Path2D(), transform = matrix.scale(options.scale);\n                if (finalPath.addPath) {\n                    finalPath.addPath(path2d, transform);\n                    path.path2d = finalPath;\n                }\n                else {\n                    delete path.path2d;\n                }\n            }\n            else {\n                delete path.path2d;\n            }\n            if (path.path2d || !this.raw) {\n                continue;\n            }\n            path.path2d = new Path2D();\n            path.path2d.moveTo(this.raw[0].x, this.raw[0].y);\n            this.raw.forEach((pos, i) => {\n                var _a;\n                if (i > 0) {\n                    (_a = path.path2d) === null || _a === void 0 ? void 0 : _a.lineTo(pos.x, pos.y);\n                }\n            });\n            path.path2d.closePath();\n        }\n    }\n    async initRawData(force) {\n        const options = this.options;\n        if (options.url) {\n            this.raw = await this.downloadSvgPath(options.url, force);\n        }\n        else if (options.data) {\n            const data = options.data;\n            let svg;\n            if (typeof data !== \"string\") {\n                const path = data.path instanceof Array\n                    ? data.path.map((t) => `<path d=\"${t}\" />`).join(\"\")\n                    : `<path d=\"${data.path}\" />`;\n                const namespaces = 'xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"';\n                svg = `<svg ${namespaces} width=\"${data.size.width}\" height=\"${data.size.height}\">${path}</svg>`;\n            }\n            else {\n                svg = data;\n            }\n            this.raw = this.parseSvgPath(svg, force);\n        }\n        this.createPath2D();\n    }\n}\nexports.PolygonMaskInstance = PolygonMaskInstance;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,mBAAmB,GAAG,KAAK,CAAC;AACpC,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,OAAO,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC5C,MAAME,aAAa,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACxD,MAAMG,WAAW,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AACzD,MAAMI,aAAa,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;AAC9D,MAAMF,mBAAmB,CAAC;EACtBO,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACC,SAAS,GAAG;MACbC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE;IACX,CAAC;IACD,IAAI,CAACC,eAAe,GAAG,CAAC,CAACC,MAAM,CAACC,MAAM;IACtC,IAAI,CAACC,OAAO,GAAG,IAAIT,aAAa,CAACU,WAAW,CAAC,CAAC;IAC9C,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACF,OAAO,CAACG,IAAI,CAACC,MAAM,GAAGX,SAAS,CAACY,MAAM,CAACC,UAAU;EACvF;EACA,MAAMC,SAASA,CAACP,OAAO,EAAE;IACrB,IAAI,CAACA,OAAO,CAACQ,IAAI,CAACR,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAACS,OAAO,CAAC;IACpF,MAAMC,kBAAkB,GAAG,IAAI,CAACV,OAAO;IACvC,IAAI,CAACE,qBAAqB,GAAGQ,kBAAkB,CAACP,IAAI,CAACC,MAAM,GAAG,IAAI,CAACX,SAAS,CAACY,MAAM,CAACC,UAAU;IAC9F,IAAII,kBAAkB,CAACC,MAAM,EAAE;MAC3B,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;IAC5B;EACJ;EACAC,MAAMA,CAAA,EAAG;IACL,MAAMpB,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEO,OAAO,GAAG,IAAI,CAACA,OAAO;IACxD,IAAI,EAAEA,OAAO,CAACW,MAAM,IAAIX,OAAO,CAACc,IAAI,KAAK,MAAM,CAAC,EAAE;MAC9C;IACJ;IACA,IAAI,IAAI,CAACC,aAAa,EAAE;MACpBC,YAAY,CAAC,IAAI,CAACD,aAAa,CAAC;IACpC;IACA,IAAI,CAACA,aAAa,GAAGjB,MAAM,CAACmB,UAAU,CAAC,YAAY;MAC/C,MAAM,IAAI,CAACL,WAAW,CAAC,IAAI,CAAC;MAC5B,MAAMnB,SAAS,CAACyB,SAAS,CAACC,MAAM,CAAC,CAAC;IACtC,CAAC,EAAE,GAAG,CAAC;EACX;EACAC,IAAIA,CAAA,EAAG;IACH,OAAO,IAAI,CAACC,GAAG;IACf,OAAO,IAAI,CAACC,KAAK;EACrB;EACAC,uBAAuBA,CAAA,EAAG;IACtB,MAAMvB,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,CAACW,MAAM,IACdX,OAAO,CAACc,IAAI,KAAK,QAAQ,KACxBd,OAAO,CAACwB,MAAM,CAACC,WAAW,KAAK,eAAe,IAC3CzB,OAAO,CAACwB,MAAM,CAACC,WAAW,KAAK,WAAW,CAAC,EAAE;MACjD,IAAI,CAACC,UAAU,CAAC,CAAC;MACjB,OAAO,IAAI;IACf;IACA,OAAO,KAAK;EAChB;EACAC,gBAAgBA,CAACC,QAAQ,EAAE;IACvB,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAM9B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,EAAEA,OAAO,CAACW,MAAM,IAAI,CAAC,CAACmB,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACR,GAAG,MAAM,IAAI,IAAIQ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,MAAM,IAAI,IAAID,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,EAAE;MACrI;IACJ;IACA,OAAO,CAAC,CAAC,EAAE1C,OAAO,CAAC4C,UAAU,EAAE,CAAC,CAAC,EAAEJ,QAAQ,GAAGA,QAAQ,GAAG,IAAI,CAACK,WAAW,CAAC,CAAC,CAAC;EAChF;EACAC,cAAcA,CAACC,QAAQ,EAAEC,KAAK,EAAEC,SAAS,EAAE;IACvC,OAAO,IAAI,CAACC,aAAa,CAACH,QAAQ,EAAEC,KAAK,EAAEC,SAAS,CAAC;EACzD;EACAE,kBAAkBA,CAACX,QAAQ,EAAE;IACzB,MAAM5B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,OAAQA,OAAO,CAACW,MAAM,IAClBX,OAAO,CAACc,IAAI,KAAK,MAAM,IACvBd,OAAO,CAACc,IAAI,KAAK,QAAQ,IACzB,IAAI,CAAC0B,kBAAkB,CAACZ,QAAQ,CAAC;EACzC;EACAa,IAAIA,CAACC,OAAO,EAAE;IACV,IAAIb,EAAE;IACN,IAAI,EAAE,CAACA,EAAE,GAAG,IAAI,CAACP,KAAK,MAAM,IAAI,IAAIO,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,CAAC,EAAE;MACrE;IACJ;IACA,MAAM/B,OAAO,GAAG,IAAI,CAACA,OAAO;MAAE2C,WAAW,GAAG3C,OAAO,CAACyC,IAAI;IACxD,IAAI,CAACzC,OAAO,CAACW,MAAM,IAAI,CAACgC,WAAW,CAAChC,MAAM,EAAE;MACxC;IACJ;IACA,MAAMiC,OAAO,GAAG,IAAI,CAACvB,GAAG;IACxB,KAAK,MAAMwB,IAAI,IAAI,IAAI,CAACvB,KAAK,EAAE;MAC3B,MAAMwB,MAAM,GAAGD,IAAI,CAACC,MAAM;QAAEC,eAAe,GAAG,IAAI,CAAClD,eAAe;MAClE,IAAI,CAAC6C,OAAO,EAAE;QACV;MACJ;MACA,IAAIK,eAAe,IAAID,MAAM,IAAI,IAAI,CAACE,MAAM,EAAE;QAC1C,CAAC,CAAC,EAAE9D,OAAO,CAAC+D,mBAAmB,EAAEP,OAAO,EAAEI,MAAM,EAAEH,WAAW,CAACO,MAAM,EAAE,IAAI,CAACF,MAAM,CAAC;MACtF,CAAC,MACI,IAAIJ,OAAO,EAAE;QACd,CAAC,CAAC,EAAE1D,OAAO,CAACiE,eAAe,EAAET,OAAO,EAAEE,OAAO,EAAED,WAAW,CAACO,MAAM,CAAC;MACtE;IACJ;EACJ;EACAZ,aAAaA,CAACH,QAAQ,EAAEiB,MAAM,EAAEf,SAAS,EAAE;IACvC,MAAMrC,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAAC,IAAI,CAACqB,GAAG,IAAI,CAACrB,OAAO,CAACW,MAAM,IAAI0B,SAAS,KAAK,KAAK,EAAE;MACrD,OAAO,KAAK;IAChB;IACA,IAAIrC,OAAO,CAACc,IAAI,KAAK,QAAQ,IAAId,OAAO,CAACc,IAAI,KAAK,SAAS,EAAE;MACzD,IAAIuC,OAAO,EAAEC,EAAE,EAAEC,EAAE;MACnB,MAAMC,GAAG,GAAGrB,QAAQ,CAACsB,WAAW,CAAC,CAAC;QAAErD,MAAM,GAAG+B,QAAQ,CAACuB,SAAS,CAAC,CAAC;MACjE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACvC,GAAG,CAACU,MAAM,GAAG,CAAC,EAAE4B,CAAC,GAAG,IAAI,CAACtC,GAAG,CAACU,MAAM,EAAE6B,CAAC,GAAGD,CAAC,EAAE,EAAE;QACnE,MAAME,EAAE,GAAG,IAAI,CAACxC,GAAG,CAACsC,CAAC,CAAC;UAAEG,EAAE,GAAG,IAAI,CAACzC,GAAG,CAACuC,CAAC,CAAC;QACxCP,OAAO,GAAG,CAAC,CAAC,EAAEnE,OAAO,CAAC6E,sBAAsB,EAAEF,EAAE,EAAEC,EAAE,EAAEN,GAAG,CAAC;QAC1D,MAAMQ,IAAI,GAAG,CAAC,CAAC,EAAE3E,aAAa,CAAC4E,YAAY,EAAET,GAAG,EAAEH,OAAO,CAAC;QAC1D,CAACC,EAAE,EAAEC,EAAE,CAAC,GAAG,CAACS,IAAI,CAACV,EAAE,EAAEU,IAAI,CAACT,EAAE,CAAC;QAC7B,IAAIS,IAAI,CAACE,QAAQ,GAAG9D,MAAM,EAAE;UACxB,CAAC,CAAC,EAAElB,OAAO,CAACiF,aAAa,EAAEN,EAAE,EAAEC,EAAE,EAAE3B,QAAQ,CAACiC,QAAQ,CAAC;UACrD,OAAO,IAAI;QACf;MACJ;MACA,IAAIf,OAAO,IAAIC,EAAE,KAAKe,SAAS,IAAId,EAAE,KAAKc,SAAS,IAAI,CAAC,IAAI,CAAC7B,kBAAkB,CAACgB,GAAG,CAAC,EAAE;QAClF,MAAMc,MAAM,GAAG;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE,CAAC;QAC7B,IAAIrC,QAAQ,CAACP,QAAQ,CAAC2C,CAAC,IAAIlB,OAAO,CAACkB,CAAC,EAAE;UAClCD,MAAM,CAACC,CAAC,GAAG,CAAC,CAAC;QACjB;QACA,IAAIpC,QAAQ,CAACP,QAAQ,CAAC4C,CAAC,IAAInB,OAAO,CAACmB,CAAC,EAAE;UAClCF,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;QACjB;QACArC,QAAQ,CAACP,QAAQ,CAAC2C,CAAC,GAAGlB,OAAO,CAACkB,CAAC,GAAGnE,MAAM,GAAG,CAAC,GAAGkE,MAAM,CAACC,CAAC;QACvDpC,QAAQ,CAACP,QAAQ,CAAC4C,CAAC,GAAGnB,OAAO,CAACmB,CAAC,GAAGpE,MAAM,GAAG,CAAC,GAAGkE,MAAM,CAACE,CAAC;QACvDrC,QAAQ,CAACiC,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,OAAO,IAAI;MACf;IACJ,CAAC,MACI,IAAIzE,OAAO,CAACc,IAAI,KAAK,QAAQ,IAAIqB,QAAQ,CAACuC,eAAe,EAAE;MAC5D,MAAMV,IAAI,GAAG,CAAC,CAAC,EAAE3E,aAAa,CAACsF,WAAW,EAAExC,QAAQ,CAACuC,eAAe,EAAEvC,QAAQ,CAACsB,WAAW,CAAC,CAAC,CAAC;MAC7F,IAAIO,IAAI,GAAG,IAAI,CAAC9D,qBAAqB,EAAE;QACnCiC,QAAQ,CAACiC,QAAQ,CAACG,CAAC,GAAGpC,QAAQ,CAACiC,QAAQ,CAACI,CAAC,GAAG,CAAC,GAAGrC,QAAQ,CAACiC,QAAQ,CAACG,CAAC;QACnEpC,QAAQ,CAACiC,QAAQ,CAACI,CAAC,GAAGrC,QAAQ,CAACiC,QAAQ,CAACG,CAAC,GAAG,CAAC,GAAGpC,QAAQ,CAACiC,QAAQ,CAACI,CAAC;QACnE,OAAO,IAAI;MACf;IACJ;IACA,OAAO,KAAK;EAChB;EACAhC,kBAAkBA,CAACZ,QAAQ,EAAE;IACzB,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMrC,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEO,OAAO,GAAG,IAAI,CAACA,OAAO;IACxD,IAAI,CAACA,OAAO,CAACW,MAAM,IAAIX,OAAO,CAACc,IAAI,KAAK,MAAM,IAAId,OAAO,CAACc,IAAI,KAAK,QAAQ,EAAE;MACzE,OAAO,IAAI;IACf;IACA,IAAI,CAAC,IAAI,CAACO,GAAG,EAAE;MACX,MAAM,IAAIuD,KAAK,CAACtF,WAAW,CAACuF,SAAS,CAACC,cAAc,CAAC;IACzD;IACA,MAAMC,UAAU,GAAGtF,SAAS,CAACuF,MAAM,CAACC,IAAI;MAAEV,CAAC,GAAG,CAAC1C,EAAE,GAAGD,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC2C,CAAC,MAAM,IAAI,IAAI1C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGqD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,UAAU,CAACnF,KAAK;MAAE4E,CAAC,GAAG,CAAC1C,EAAE,GAAGF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,QAAQ,CAAC4C,CAAC,MAAM,IAAI,IAAI1C,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGoD,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGJ,UAAU,CAACpF,MAAM;IACnU,IAAIyF,MAAM,GAAG,KAAK;IAClB,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG,IAAI,CAACvC,GAAG,CAACU,MAAM,GAAG,CAAC,EAAE4B,CAAC,GAAG,IAAI,CAACtC,GAAG,CAACU,MAAM,EAAE6B,CAAC,GAAGD,CAAC,EAAE,EAAE;MACnE,MAAME,EAAE,GAAG,IAAI,CAACxC,GAAG,CAACsC,CAAC,CAAC;QAAEG,EAAE,GAAG,IAAI,CAACzC,GAAG,CAACuC,CAAC,CAAC;QAAEyB,SAAS,GAAGxB,EAAE,CAACW,CAAC,GAAGA,CAAC,KAAKV,EAAE,CAACU,CAAC,GAAGA,CAAC,IAAID,CAAC,GAAI,CAACT,EAAE,CAACS,CAAC,GAAGV,EAAE,CAACU,CAAC,KAAKC,CAAC,GAAGX,EAAE,CAACW,CAAC,CAAC,IAAKV,EAAE,CAACU,CAAC,GAAGX,EAAE,CAACW,CAAC,CAAC,GAAGX,EAAE,CAACU,CAAC;MACtI,IAAIc,SAAS,EAAE;QACXD,MAAM,GAAG,CAACA,MAAM;MACpB;IACJ;IACA,OAAOpF,OAAO,CAACc,IAAI,KAAK,QAAQ,GAC1BsE,MAAM,GACNpF,OAAO,CAACc,IAAI,KAAK,SAAS,GACtB,CAACsE,MAAM,GACP,KAAK;EACnB;EACAE,YAAYA,CAACC,GAAG,EAAEC,KAAK,EAAE;IACrB,IAAI3D,EAAE,EAAEC,EAAE,EAAE2D,EAAE;IACd,MAAMC,aAAa,GAAGF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,KAAK;IACxE,IAAI,IAAI,CAAClE,KAAK,KAAK+C,SAAS,IAAI,CAACqB,aAAa,EAAE;MAC5C,OAAO,IAAI,CAACrE,GAAG;IACnB;IACA,MAAM5B,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEO,OAAO,GAAG,IAAI,CAACA,OAAO;MAAE2F,MAAM,GAAG,IAAIC,SAAS,CAAC,CAAC;MAAEC,GAAG,GAAGF,MAAM,CAACG,eAAe,CAACP,GAAG,EAAE,eAAe,CAAC;MAAEQ,GAAG,GAAGF,GAAG,CAACG,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAChL,IAAIC,QAAQ,GAAGF,GAAG,CAACC,oBAAoB,CAAC,MAAM,CAAC;IAC/C,IAAI,CAACC,QAAQ,CAAClE,MAAM,EAAE;MAClBkE,QAAQ,GAAGJ,GAAG,CAACG,oBAAoB,CAAC,MAAM,CAAC;IAC/C;IACA,IAAI,CAAC1E,KAAK,GAAG,EAAE;IACf,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsC,QAAQ,CAAClE,MAAM,EAAE4B,CAAC,EAAE,EAAE;MACtC,MAAMd,IAAI,GAAGoD,QAAQ,CAACC,IAAI,CAACvC,CAAC,CAAC;MAC7B,IAAId,IAAI,EAAE;QACN,IAAI,CAACvB,KAAK,CAAC6E,IAAI,CAAC;UACZC,OAAO,EAAEvD,IAAI;UACbd,MAAM,EAAEc,IAAI,CAACwD,cAAc,CAAC;QAChC,CAAC,CAAC;MACN;IACJ;IACA,MAAMC,OAAO,GAAG7G,SAAS,CAACY,MAAM,CAACC,UAAU;MAAEiG,KAAK,GAAGvG,OAAO,CAACuG,KAAK,GAAGD,OAAO;IAC5E,IAAI,CAAC5G,SAAS,CAACE,KAAK,GAAG4G,UAAU,CAAC,CAAC3E,EAAE,GAAGkE,GAAG,CAACU,YAAY,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI5E,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,GAAG,CAAC,GAAG0E,KAAK;IAChH,IAAI,CAAC7G,SAAS,CAACC,MAAM,GAAG6G,UAAU,CAAC,CAAC1E,EAAE,GAAGiE,GAAG,CAACU,YAAY,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI3E,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,GAAG,CAAC,GAAGyE,KAAK;IAClH,MAAM3E,QAAQ,GAAG,CAAC6D,EAAE,GAAGzF,OAAO,CAAC4B,QAAQ,MAAM,IAAI,IAAI6D,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG;MACtElB,CAAC,EAAE,EAAE;MACLC,CAAC,EAAE;IACP,CAAC;IACD,IAAI,CAACxB,MAAM,GAAG;MACVuB,CAAC,EAAG9E,SAAS,CAACuF,MAAM,CAACC,IAAI,CAACrF,KAAK,GAAGgC,QAAQ,CAAC2C,CAAC,IAAK,GAAG,GAAG+B,OAAO,CAAC,GAAG,IAAI,CAAC5G,SAAS,CAACE,KAAK,GAAG,CAAC;MAC1F4E,CAAC,EAAG/E,SAAS,CAACuF,MAAM,CAACC,IAAI,CAACtF,MAAM,GAAGiC,QAAQ,CAAC4C,CAAC,IAAK,GAAG,GAAG8B,OAAO,CAAC,GAAG,IAAI,CAAC5G,SAAS,CAACC,MAAM,GAAG;IAC/F,CAAC;IACD,OAAO,CAAC,CAAC,EAAET,OAAO,CAACwH,UAAU,EAAE,IAAI,CAACpF,KAAK,EAAEiF,KAAK,EAAE,IAAI,CAACvD,MAAM,CAAC;EAClE;EACA,MAAM2D,eAAeA,CAACC,MAAM,EAAEpB,KAAK,EAAE;IACjC,MAAMxF,OAAO,GAAG,IAAI,CAACA,OAAO;MAAE6G,GAAG,GAAGD,MAAM,IAAI5G,OAAO,CAAC6G,GAAG;MAAEnB,aAAa,GAAGF,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAGA,KAAK,GAAG,KAAK;IAC7H,IAAI,CAACqB,GAAG,IAAK,IAAI,CAACvF,KAAK,KAAK+C,SAAS,IAAI,CAACqB,aAAc,EAAE;MACtD,OAAO,IAAI,CAACrE,GAAG;IACnB;IACA,MAAMyF,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IAC5B,IAAI,CAACC,GAAG,CAACE,EAAE,EAAE;MACT,MAAM,IAAIpC,KAAK,CAAC,iEAAiE,CAAC;IACtF;IACA,OAAO,IAAI,CAACU,YAAY,CAAC,MAAMwB,GAAG,CAACG,IAAI,CAAC,CAAC,EAAEzB,KAAK,CAAC;EACrD;EACA9D,UAAUA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAACL,GAAG,EAAE;MACX;IACJ;IACA,KAAK,MAAM6E,IAAI,IAAI,IAAI,CAAC7E,GAAG,EAAE;MACzB,IAAI,CAAC5B,SAAS,CAACyB,SAAS,CAACgG,WAAW,CAAC;QACjC3C,CAAC,EAAE2B,IAAI,CAAC3B,CAAC;QACTC,CAAC,EAAE0B,IAAI,CAAC1B;MACZ,CAAC,CAAC;IACN;EACJ;EACAvC,WAAWA,CAAA,EAAG;IACV,MAAMxC,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEO,OAAO,GAAG,IAAI,CAACA,OAAO;IACxD,IAAI4B,QAAQ;IACZ,IAAI5B,OAAO,CAACc,IAAI,KAAK,QAAQ,EAAE;MAC3B,QAAQd,OAAO,CAACwB,MAAM,CAACC,WAAW;QAC9B,KAAK,cAAc;UACfG,QAAQ,GAAG,IAAI,CAACuF,cAAc,CAAC,CAAC;UAChC;QACJ,KAAK,eAAe;UAChBvF,QAAQ,GAAG,IAAI,CAACwF,sBAAsB,CAAC,CAAC;UACxC;QACJ,KAAK,aAAa;UACdxF,QAAQ,GAAG,IAAI,CAACyF,0BAA0B,CAAC5H,SAAS,CAACyB,SAAS,CAACoG,KAAK,CAAC;UACrE;QACJ,KAAK,eAAe;QACpB,KAAK,WAAW;QAChB;UACI1F,QAAQ,GAAG,IAAI,CAAC2F,eAAe,CAAC9H,SAAS,CAACyB,SAAS,CAACoG,KAAK,CAAC;MAClE;IACJ,CAAC,MACI;MACD1F,QAAQ,GAAG;QACP2C,CAAC,EAAEW,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG1F,SAAS,CAACuF,MAAM,CAACC,IAAI,CAACrF,KAAK;QAC9C4E,CAAC,EAAEU,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG1F,SAAS,CAACuF,MAAM,CAACC,IAAI,CAACtF;MAC7C,CAAC;IACL;IACA,IAAI,IAAI,CAAC6C,kBAAkB,CAACZ,QAAQ,CAAC,EAAE;MACnC,OAAOA,QAAQ;IACnB,CAAC,MACI;MACD,OAAO,IAAI,CAACK,WAAW,CAAC,CAAC;IAC7B;EACJ;EACAkF,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAAC9F,GAAG,IAAI,CAAC,IAAI,CAACA,GAAG,CAACU,MAAM,EAAE;MAC/B,MAAM,IAAI6C,KAAK,CAACtF,WAAW,CAACuF,SAAS,CAAC2C,mBAAmB,CAAC;IAC9D;IACA,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAErI,OAAO,CAACsI,aAAa,EAAE,IAAI,CAACrG,GAAG,CAAC;IACnD,OAAO;MACHkD,CAAC,EAAEkD,MAAM,CAAClD,CAAC;MACXC,CAAC,EAAEiD,MAAM,CAACjD;IACd,CAAC;EACL;EACA4C,sBAAsBA,CAAA,EAAG;IACrB,IAAIvF,EAAE,EAAEC,EAAE,EAAE2D,EAAE;IACd,MAAMzF,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAAC,IAAI,CAACqB,GAAG,IAAI,CAAC,IAAI,CAACA,GAAG,CAACU,MAAM,IAAI,EAAE,CAACF,EAAE,GAAG,IAAI,CAACP,KAAK,MAAM,IAAI,IAAIO,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,CAAC,EAAE;MACtG,MAAM,IAAI6C,KAAK,CAACtF,WAAW,CAACuF,SAAS,CAAC2C,mBAAmB,CAAC;IAC9D;IACA,MAAM3E,IAAI,GAAG,CAAC,CAAC,EAAEzD,OAAO,CAACsI,aAAa,EAAE,IAAI,CAACpG,KAAK,CAAC;MAAE4C,QAAQ,GAAGgB,IAAI,CAACyC,KAAK,CAACzC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGtC,IAAI,CAACd,MAAM,CAAC,GAAG,CAAC;MAAE6F,KAAK,GAAG/E,IAAI,CAACuD,OAAO,CAACyB,gBAAgB,CAAC3D,QAAQ,CAAC;IAC5J,OAAO;MACHK,CAAC,EAAEqD,KAAK,CAACrD,CAAC,GAAGvE,OAAO,CAACuG,KAAK,IAAI,CAAC,CAACzE,EAAE,GAAG,IAAI,CAACkB,MAAM,MAAM,IAAI,IAAIlB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyC,CAAC,KAAK,CAAC,CAAC;MAClGC,CAAC,EAAEoD,KAAK,CAACpD,CAAC,GAAGxE,OAAO,CAACuG,KAAK,IAAI,CAAC,CAACd,EAAE,GAAG,IAAI,CAACzC,MAAM,MAAM,IAAI,IAAIyC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACjB,CAAC,KAAK,CAAC;IACrG,CAAC;EACL;EACA6C,0BAA0BA,CAACS,KAAK,EAAE;IAC9B,IAAIjG,EAAE,EAAEC,EAAE,EAAE2D,EAAE,EAAEsC,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE;IAC9B,MAAMlI,OAAO,GAAG,IAAI,CAACP,SAAS,CAAC0I,aAAa;MAAEzH,kBAAkB,GAAG,IAAI,CAACV,OAAO;IAC/E,IAAI,CAAC,IAAI,CAACqB,GAAG,IAAI,CAAC,IAAI,CAACA,GAAG,CAACU,MAAM,IAAI,EAAE,CAACF,EAAE,GAAG,IAAI,CAACP,KAAK,MAAM,IAAI,IAAIO,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,CAAC,EACpG,MAAM,IAAI6C,KAAK,CAACtF,WAAW,CAACuF,SAAS,CAAC2C,mBAAmB,CAAC;IAC9D,IAAIxE,MAAM,GAAG,CAAC;MAAE4E,KAAK;IACrB,MAAMQ,WAAW,GAAG,IAAI,CAAC9G,KAAK,CAAC+G,MAAM,CAAC,CAACC,GAAG,EAAEzF,IAAI,KAAKyF,GAAG,GAAGzF,IAAI,CAACd,MAAM,EAAE,CAAC,CAAC;MAAEmC,QAAQ,GAAGkE,WAAW,GAAGpI,OAAO,CAACkB,SAAS,CAACqH,MAAM,CAACvJ,KAAK;IACnI,KAAK,MAAM6D,IAAI,IAAI,IAAI,CAACvB,KAAK,EAAE;MAC3B,MAAMkH,YAAY,GAAGtE,QAAQ,GAAG4D,KAAK,GAAG9E,MAAM;MAC9C,IAAIwF,YAAY,IAAI3F,IAAI,CAACd,MAAM,EAAE;QAC7B6F,KAAK,GAAG/E,IAAI,CAACuD,OAAO,CAACyB,gBAAgB,CAACW,YAAY,CAAC;QACnD;MACJ,CAAC,MACI;QACDxF,MAAM,IAAIH,IAAI,CAACd,MAAM;MACzB;IACJ;IACA,OAAO;MACHwC,CAAC,EAAE,CAAC,CAACzC,EAAE,GAAG8F,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACrD,CAAC,MAAM,IAAI,IAAIzC,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAIpB,kBAAkB,CAAC6F,KAAK,IAAI,CAACwB,EAAE,GAAG,CAACtC,EAAE,GAAG,IAAI,CAACzC,MAAM,MAAM,IAAI,IAAIyC,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAClB,CAAC,MAAM,IAAI,IAAIwD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,CAAC;MAC1OvD,CAAC,EAAE,CAAC,CAACwD,EAAE,GAAGJ,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,KAAK,CAACpD,CAAC,MAAM,IAAI,IAAIwD,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC,IAAItH,kBAAkB,CAAC6F,KAAK,IAAI,CAAC2B,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACjF,MAAM,MAAM,IAAI,IAAIiF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACzD,CAAC,MAAM,IAAI,IAAI0D,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,CAAC;IAC7O,CAAC;EACL;EACAX,eAAeA,CAACO,KAAK,EAAE;IACnB,IAAI,CAAC,IAAI,CAACzG,GAAG,IAAI,CAAC,IAAI,CAACA,GAAG,CAACU,MAAM,EAAE;MAC/B,MAAM,IAAI6C,KAAK,CAACtF,WAAW,CAACuF,SAAS,CAAC2C,mBAAmB,CAAC;IAC9D;IACA,MAAMC,MAAM,GAAG,IAAI,CAACpG,GAAG,CAACyG,KAAK,GAAG,IAAI,CAACzG,GAAG,CAACU,MAAM,CAAC;IAChD,OAAO;MACHwC,CAAC,EAAEkD,MAAM,CAAClD,CAAC;MACXC,CAAC,EAAEiD,MAAM,CAACjD;IACd,CAAC;EACL;EACAiE,YAAYA,CAAA,EAAG;IACX,IAAI5G,EAAE,EAAEC,EAAE;IACV,MAAM9B,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAI,CAAC,IAAI,CAACH,eAAe,IAAI,EAAE,CAACgC,EAAE,GAAG,IAAI,CAACP,KAAK,MAAM,IAAI,IAAIO,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACE,MAAM,CAAC,EAAE;MAC9F;IACJ;IACA,KAAK,MAAMc,IAAI,IAAI,IAAI,CAACvB,KAAK,EAAE;MAC3B,MAAMoH,QAAQ,GAAG,CAAC5G,EAAE,GAAGe,IAAI,CAACuD,OAAO,MAAM,IAAI,IAAItE,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAC2E,YAAY,CAAC,GAAG,CAAC;MAC9F,IAAIiC,QAAQ,EAAE;QACV,MAAM5F,MAAM,GAAG,IAAI/C,MAAM,CAAC2I,QAAQ,CAAC;UAAEC,MAAM,GAAGC,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,KAAK,CAAC,CAACC,eAAe,CAAC,CAAC;UAAEC,SAAS,GAAG,IAAIhJ,MAAM,CAAC,CAAC;UAAEiJ,SAAS,GAAGL,MAAM,CAACpC,KAAK,CAACvG,OAAO,CAACuG,KAAK,CAAC;QAChM,IAAIwC,SAAS,CAACE,OAAO,EAAE;UACnBF,SAAS,CAACE,OAAO,CAACnG,MAAM,EAAEkG,SAAS,CAAC;UACpCnG,IAAI,CAACC,MAAM,GAAGiG,SAAS;QAC3B,CAAC,MACI;UACD,OAAOlG,IAAI,CAACC,MAAM;QACtB;MACJ,CAAC,MACI;QACD,OAAOD,IAAI,CAACC,MAAM;MACtB;MACA,IAAID,IAAI,CAACC,MAAM,IAAI,CAAC,IAAI,CAACzB,GAAG,EAAE;QAC1B;MACJ;MACAwB,IAAI,CAACC,MAAM,GAAG,IAAI/C,MAAM,CAAC,CAAC;MAC1B8C,IAAI,CAACC,MAAM,CAACoG,MAAM,CAAC,IAAI,CAAC7H,GAAG,CAAC,CAAC,CAAC,CAACkD,CAAC,EAAE,IAAI,CAAClD,GAAG,CAAC,CAAC,CAAC,CAACmD,CAAC,CAAC;MAChD,IAAI,CAACnD,GAAG,CAAC8H,OAAO,CAAC,CAAC3F,GAAG,EAAEG,CAAC,KAAK;QACzB,IAAI9B,EAAE;QACN,IAAI8B,CAAC,GAAG,CAAC,EAAE;UACP,CAAC9B,EAAE,GAAGgB,IAAI,CAACC,MAAM,MAAM,IAAI,IAAIjB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACuH,MAAM,CAAC5F,GAAG,CAACe,CAAC,EAAEf,GAAG,CAACgB,CAAC,CAAC;QACnF;MACJ,CAAC,CAAC;MACF3B,IAAI,CAACC,MAAM,CAACuG,SAAS,CAAC,CAAC;IAC3B;EACJ;EACA,MAAMzI,WAAWA,CAAC4E,KAAK,EAAE;IACrB,MAAMxF,OAAO,GAAG,IAAI,CAACA,OAAO;IAC5B,IAAIA,OAAO,CAAC6G,GAAG,EAAE;MACb,IAAI,CAACxF,GAAG,GAAG,MAAM,IAAI,CAACsF,eAAe,CAAC3G,OAAO,CAAC6G,GAAG,EAAErB,KAAK,CAAC;IAC7D,CAAC,MACI,IAAIxF,OAAO,CAACsJ,IAAI,EAAE;MACnB,MAAMA,IAAI,GAAGtJ,OAAO,CAACsJ,IAAI;MACzB,IAAIvD,GAAG;MACP,IAAI,OAAOuD,IAAI,KAAK,QAAQ,EAAE;QAC1B,MAAMzG,IAAI,GAAGyG,IAAI,CAACzG,IAAI,YAAY0G,KAAK,GACjCD,IAAI,CAACzG,IAAI,CAAC2G,GAAG,CAAEC,CAAC,IAAM,YAAWA,CAAE,MAAK,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC,GACjD,YAAWJ,IAAI,CAACzG,IAAK,MAAK;QACjC,MAAM8G,UAAU,GAAG,+EAA+E;QAClG5D,GAAG,GAAI,QAAO4D,UAAW,WAAUL,IAAI,CAACrE,IAAI,CAACrF,KAAM,aAAY0J,IAAI,CAACrE,IAAI,CAACtF,MAAO,KAAIkD,IAAK,QAAO;MACpG,CAAC,MACI;QACDkD,GAAG,GAAGuD,IAAI;MACd;MACA,IAAI,CAACjI,GAAG,GAAG,IAAI,CAACiE,YAAY,CAACS,GAAG,EAAEP,KAAK,CAAC;IAC5C;IACA,IAAI,CAACiD,YAAY,CAAC,CAAC;EACvB;AACJ;AACA1J,OAAO,CAACE,mBAAmB,GAAGA,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}